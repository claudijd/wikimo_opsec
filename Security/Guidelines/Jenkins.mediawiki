<table>
  <tr>
    <td style="min-width: 25em;">__TOC__</td>
    <td style="vertical-align: top; padding-left: 1em;">
The goal of this document is to help operational teams with the configuration of Jenkins, a continuous integration/delivery application.

All Mozilla sites and deployment should follow the recommendations below.  The Enterprise Information Security (Infosec, formerly
OpSec) team maintains this document as a reference guide for operational teams.

Updates to this page should be submitted to the [https://github.com/mozilla/wikimo_opsec/ source repository on github].
Changes are detailed in the [https://github.com/mozilla/wikimo_opsec/commits/master commit history].

<span style="float: right; padding-top: 3em;">[[File:OpSec.png|300px]]</span>
    </td>
  </tr>
</table>

= Jenkins-CI =
== HTTP ==
=== Transport Encryption ===
By default, the Jenkins web administration console is served over HTTP.  This allows a MiTM attacker to steal Jenkins administrative credentials.  To combat this, all Jenkins web applications should be served over HTTPS using a certificate from a trusted certificate authority.  If purchasing an certificate is deemed cost prohibitive, certificates can be obtained **FREE** from [https://letsencrypt.org/ Let's Encrypt].

Additional configuration is required on the server instance to control the various TLS configuration settings that the Jenkins instance will support.  Any Jenkins installations should implement a MODERN TLS configuration, as defined by the [https://wiki.mozilla.org/Security/Server_Side_TLS Mozilla Server Side TLS guide].  Mozilla also provides an [https://mozilla.github.io/server-side-tls/ssl-config-generator/ SSL configuration generator] to assist you in building of a MODERN configuration for your chosen web server to host Jenkins with.

=== Sensitive Path Restrictions ===
There are a number of known URL paths that expose attack surface on a Jenkins installation that you may not want, but are not often configurable within the application.  Depending on your specific use case of Jenkins, you may choose to block one or more of these paths to reduce this attack surface, which are commonly used by attackers to exploit configuration flaws and/or gather information that could be later used to assist in other types of attacks.

Please note that the following paths are relative to the Jenkins application root.  So if the Jenkins installation is reachable at /jenkins instead of the default /, you may need to make substitutions accordingly:

  ./script
  ./view/All/newJob
  ./asynchPeople
  ./systemInfo
  ./api
  ./restart
  ./quietDown
  ./user/jenkins
  ./jnlpJars
  ./asynchPeople
  ./credential-store
  ./job/[job_name]/[build_number]/injectedEnvVars/

Such path restrictions can be implemented in any modern web server technology.

nginx Example:

  # Restrict access to the following paths
  location ^~ /(api|restart|quietDown|user/jenkins|jnlpJars|script|asynchPeople|credential-store|systemInfo|view/All/newJob) {
    deny    all;
  }
  # Restrict access to injectedEnvVars paths
  location ~* ^.+/injectedEnvVars/$ {
    deny    all;
  }

Apache HTTPD Example:

  # Restrict access to the following paths
  <DirectoryMatch "^/(api|restart|quietDown|user/jenkins|jnlpJars|script|asynchPeople|credential-store|systemInfo|view/All/newJob)">
    Deny from all
  </DirectoryMatch>
  # Restrict access to injectedEnvVars paths
  <DirectoryMatch "^.+/injectedEnvVars/$">
    Deny from all
  </DirectoryMatch>

It is recommended that you start with the full list of restricted paths and then remove restrictions as necessary to fit your desired use case.  Additionally, you may also consider restricting some paths by source IP to provide additional paths for users sourcing from specific source networks, such as those originating from an internal/VPN network.

=== Password Masking ===
In the configuration of a Jenkins job, you may have a need to supply a password/api key.  In these cases, it's recommended that under the "Build Environment" section that these environment variables be introduced via the "Inject passwords to the build as environment variables" section and not the "Inject environment variables to the build process" section.  As part of this subsection of the configuration, there is an additional checkbox called "Mask password parameters", which should be checked to ensure that these values are not leaked (plain-text -or- cipher-text) via the ./job/[job_name]/[build_number]/injectedEnvVars/ path pattern.

See the above section on "Sensitive Path Restrictions" to limit the impact should a Jenkins user accidentally uncheck password masking for any reason.

=== Authentication ===
*TODO* - LDAP and MFA strategy vs. user/pass, don't allow users to sign up, always require auth

=== Authorization ===
Jenkins comes with a variety of different authorization strategies, which include the following:

* Anyone can do anything (default)
* Legacy mode
* Logged-in users can do anything
* Matrix-based security
* Project-based Matrix Authorization Strategy

The default Jenkins authorization strategy ("Anyone can do anything") is designed for setup purposes only as it presents significant risk to the Jenkins installation by allowing any anonymous user to administer and view any secrets entrusted to the Jenkins instance as well as remote command execution vulnerabilities via the job configuration interface.  Any system not removed from this state before being hosted in a production location should assume that the system is compromised.

It's imperative that every Jenkins instance use at a minimum the "Logged-in users can do anything" for small groups (< 3 administrator only users) and [https://wiki.jenkins-ci.org/display/JENKINS/Matrix-based+security Matrix-based security] for any instance where users of different privilege-levels need to co-exist (ie. administrators and qa personnel) as it provides the most options for limiting user access to only required roles.

Note: When using a Matrix-based security authorization strategy, any user that is given "job" permission on a job that runs on the master node will have access to the $JENKINS_HOME directory, which would allow that user to privilege escalate to full administrator.  When giving users "job" permission or above to a job, make sure that that job is run on a slave node and that slave node should build any other jobs for which the user does not already have the "job" permission for to prevent lateral movement on the slave node.

=== CSRF Protection ===
Jenkins does provide a CSRF configuration with in Manage Jenkins => Configure Global Security as a checkbox called "Prevent Cross Site Request Forgery exploits".  Unfortunately, this feature, which is aimed at preventing an attacker from executing CSRF/XSRF exploit, also comes with some short falls including additional work to use the remote api and limited testing/compatibility support with plugins.  It is recommended that this feature be enabled at first, but if it becomes an obstacle and conflicts with one of the above issues, then it can be disabled.

== SSH ==

=== Authentication ===
All remote authentication to a Jenkins SSH service should be restricted to no less than SSH key-based authentication or dual-factor authentication where possible, as defined in the [https://wiki.mozilla.org/Security/Guidelines/OpenSSH Mozilla OpenSSH Guide].

Access to the root user should be prohibited.  This can be done via the following addition to sshd_config:

  PermitRootLogin no

=== Transport Encryption ===
Default OpenSSH configurations tend to provide reasonably good transport encryption security.  However, there is still room to further lock down a Jenkins openssh configuration and incentive to do so considering the critical functions and secrets we trust Jenkins with.

Any Jenkins installations should implement a MODERN OpenSSH Server configuration, as defined in the [https://wiki.mozilla.org/Security/Guidelines/OpenSSH Mozilla OpenSSH Guide].  Additionally, any SSH clients (likely developer workstations) connecting to the SSH server on Jenkins installations should implement a MODERN OpenSSH client configuration, also documented in the [https://wiki.mozilla.org/Security/Guidelines/OpenSSH Mozilla OpenSSH Guide].

=== Tunneling ===
SSH tunneling can be used in a couple different instances to limit attack surface on your Jenkins installation.  This is often done in a couple of scenarios.

* To provide access to Jenkins installation paths that are bound to a routable IP, which present a limited HTTP attack surface, except to users which have already authenticated to the SSH service.
* To provide connectivity to Jenkins installations that are bound to the loopback interface on the service, which present no HTTP attack surface, except to users which have already authenticated to the SSH service.

When allowing SSH access to Jenkins users for the purpose of tunneling, you may also need to consider whether those users require full SSH access, or just tunneling configuration.

To enable tunneling in SSH, simply add the following to the sshd_config file"

  AllowTcpForwarding yes

To restrict a user's ability to obtain a shell (if relevant), simply create an account that prevents access to a shell like /sbin/nologin:

  groupadd tunnel_users
  useradd -g tunnel_users -s /usr/sbin/nologin -m -d /home/jsmith_tunnel jsmith_tunnel

As an SSH client, the user can now tunnel to the localhost bound interface and access the Jenkins interface on 127.0.0.1:8080:

  ssh -L 8080:localhost:8080 jsmith_tunnel@192.168.1.1

You can also refer to the SSH agent forwarding section in the [https://wiki.mozilla.org/Security/Guidelines/OpenSSH#SSH_agent_forwarding Mozilla OpenSSH Guide] for additional hardening guidance on SSH agent tunneling.

== Architecture ==
*TODO* - Discuss the trust model in Jenkins a bit further
=== Security Zones ===
*TODO* - Don't run different trust levels on the same build target (ie. test/build/sign/push)
=== Job Isolation ===
*TODO* - Don't run anything on the master node, use slaves and containers for better OS isolation and repeatability
=== Secret Management ===
*TODO*


== Maintenance ==
=== Advisory Notification ===
*TODO* - Jenkins provides a mailing list for anyone who's managing a Jenkins instance.  They also provide pre-notification for advisories and you can sign up to receive them here for planning purposes.
=== Security Updates ===
*TODO* - address core upgrade and plugin upgrades
=== Job Pruning ===
*TODO*
=== Job Creep ===
*TODO*

= Appendixes =
== Reference documents ==

* [https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+Best+Practices]
* [https://wiki.jenkins-ci.org/display/JENKINS/Securing+Jenkins]
* [https://wiki.mozilla.org/Security/Server_Side_TLS Server Side TLS]
* [https://wiki.mozilla.org/Security/Guidelines/OpenSSH]
* [https://speakerdeck.com/javuto/security-at-scale-2015-building-open-source-software-for-security]
* [https://speakerdeck.com/claudijd/attacking-cloud-services-with-source-code]
